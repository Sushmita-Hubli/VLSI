MVM


TYPE mem IS ARRAY(3 DOWNTO 0) OF STD_LOGIC_VECTOR (7 DOWNTO 0);
SIGNAL memory : mem := (others=>(others=>'0'));
begin
PROCESS(rst, clk, addr, d_in, rd_wr)
begin
if rst = '1' then
d_out <= "00000000";
empty <= '1';
full <= '0';
memory <= (others=>(others=>'0'));

elsif falling_edge(clk) then
case rd_wr is

when '0' =>
d_out <= memory(conv_integer(addr));
empty <= '0';

full <= '1';
when others =>
memory(conv_integer(addr)) <= d_in;
empty <= '0';
if addr = "11" then
full <= '1';
else
full <= '0';
end if;

end case;
end if;
end process;
end FIFO_4x8_arch;



TVM

-- Clock process definitions
clk_process :process
begin

clk <= not(clk);
wait for clk_period/2;

end process;

-- Stimulus process
stim_proc: process
begin

rd_wr <= '1';
for address in 0 to 3 loop
addr <= std_logic_vector(to_unsigned(address, 2));
d_in <= std_logic_vector(to_unsigned(63*(address + 1), 8));
wait for clk_period*2;
end loop;
d_in <= std_logic_vector(to_unsigned(0, 8));
rd_wr <= '0';
for address in 0 to 3 loop
addr <= std_logic_vector(to_unsigned(address, 2));
wait for clk_period*2;
end loop;

end process;
stim_proc_reset :PROCESS
BEGIN
wait for clk_period*12;

rst <= '1';

wait for clk_period*2;
rst <= '0';
wait ;
end process;

END;
